Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

 

Example 1:

Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
 

Example 2:

Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


class Solution {
    public int findComplement(int num) {
        String str = "";
        int comp,complement = 0;
        int one,n = 0;
        while (num > 0)
        {
             comp = num%2;
            if(comp == 0)
            {
                comp = 1;
            }
            else{
                comp = 0;
            }
            num = num/2;     
            one = Integer.parseInt(str+comp);
            complement = complement + (int)Math.round(one*Math.pow(2,n)); 
            n = n+1;
        }
        return complement;
    }
}
