You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.

The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" is considered a different type of stone from "A".

Example 1:

Input: J = "aA", S = "aAAbbbb"
Output: 3
Example 2:

Input: J = "z", S = "ZZ"
Output: 0
Note:

S and J will consist of letters and have length at most 50.
The characters in J are distinct.

class Solution {
    public int numJewelsInStones(String J, String S) {        
        boolean[] isJewel = new boolean[128];
        for (char j: J.toCharArray())
        {
            isJewel[j] = true;
        }
        int count = 0;
        for (char s: S.toCharArray())
        {
            if(isJewel[s])count++;
        }
        return count;
    }
}
// .   Naive Approach
//         int count = 0;
//         int length1 = J.length();
//         int length2 = S.length();

//         for (int i=0;i<length1;i++)
//         {
//             for (int j=0;j<length2;j++)
//             {
//                 if(J.charAt(i)==S.charAt(j))
//                 {
//                     count++;
//                 }
//             }
//         }
//         return count;
