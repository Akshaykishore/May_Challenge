Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.

Naive :

class Solution {
    public int firstUniqChar(String s) {
        LinkedHashMap<Character, Integer> map 
            = new LinkedHashMap<>(); 
        for(int i=0;i<s.length();i++)
        {
           if (map.containsKey(s.charAt(i))) {
                 map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
            } else {
               map.put(s.charAt(i),1);
           }
        } 
        System.out.println(map);
        for(Character c : map.keySet())
		{
			if(map.get(c) == 1) {
				for (int i=0;i<s.length();i++)
                {
                    if(c == s.charAt(i))
                    {
                        return i;
                    }
                }
			}
		}
		return -1;
    }
}

Optimised One:
class Solution {
    public int firstUniqChar(String s) {
        
        int[] array=new int[26];
        
        for (int i=0;i<s.length();i++)
        {
            array[s.charAt(i)-'a']++;
        }
    
        for (int k=0;k<s.length();k++)
        {
            if(array[s.charAt(k)-'a']==1)
            {
                return k;
            }
        }
        
        return -1;
        
    }
}
    
